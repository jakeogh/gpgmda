#!/bin/bash

# rsync gpgMaildir from server to local gpgMaildir (including .sent)
# unison could be used instead, which would enable the deletion of messages and re-synchronization of any number of clients

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ] ; do SOURCE="$(readlink "$SOURCE")"; done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"	# http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in

source "${DIR}"/bash_import_set_defaults		# set -o nounset; set -o errtrace; set -o errexit; set -o pipefail
source "${DIR}"/bash_import_lock_unique_cmd_line	# implements locking so that two identical command lines can not run at the same time.
source "${DIR}"/bash_import_email_archive_folder	# defines email_archive_folder

argcount=1
usage="user@domain.com"					# assuming domain.com is the A record of the mail server with ./gpgmda running under user

test "$#" -eq "${argcount}" || { echo "$0 ${usage}" && exit 1 ; } #"-ge=>=" "-gt=>" "-le=<=" "-lt=<" "-ne=!="

email_address="${1}"
username=$(echo "${email_address}" | cut -d '@' -f 1)
domain=$(echo "${email_address}" | cut -d '@' -f 2)

gpgMaildir_archive_folder="${email_archive_folder}/_gpgMaildir_${email_address}_archive"

mkdir -p "${gpgMaildir_archive_folder}/_Maildirs" > /dev/null 2>&1

ssh_key=~/.ssh/id_rsa__"${username}@${domain}"

ssh-add -l | grep "${ssh_key}" || ssh-add "${ssh_key}"

rsync --whole-file -L -c --stats -h --progress -i -r -vv "${username}"@"${domain}":gpgMaildir "${gpgMaildir_archive_folder}/_gpgMaildirs"

exit 0
