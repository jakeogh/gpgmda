#!/bin/bash

# rsync gpgMaildir from server to local gpgMaildir (including .sent)
# unison could be used instead, which would enable the deletion of messages and re-synchronization of any number of clients

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ] ; do SOURCE="$(readlink "$SOURCE")"; done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"	# http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in

source "${DIR}"/bash_import_set_defaults		# set -o nounset; set -o errtrace; set -o errexit; set -o pipefail
source "${DIR}"/bash_import_lock_unique_cmd_line	# implements locking so that two identical command lines can not run at the same time.
source "${DIR}"/bash_import_email_archive_folder	# defines email_archive_folder

argcount=1
usage="user@domain.com"					# assuming domain.com is the A record of the mail server with ./gpgmda running under user

test "$#" -eq "${argcount}" || { echo "$0 ${usage}" && exit 1 ; } #"-ge=>=" "-gt=>" "-le=<=" "-lt=<" "-ne=!="

email_address="${1}"
username=$(echo "${email_address}" | cut -d '@' -f 1)
domain=$(echo "${email_address}" | cut -d '@' -f 2)

gpgMaildir_archive_folder="${email_archive_folder}/_gpgMaildir_${email_address}_archive"

mkdir -p "${gpgMaildir_archive_folder}/_Maildirs" > /dev/null 2>&1

ssh_key=~/.ssh/id_rsa__"${username}@${domain}"

ssh-add -l | grep "${ssh_key}" || ssh-add "${ssh_key}" || echo "could not add key to ssh-agent"

# rsync options:

# in this use case, a file on the server should never change. its atime, and mtime never change, and all ctimes are the same.
# in the case that a file differs between the server and client, then either:
#	there was a file name collision (will never happen)
#	the file was modified some other way (much more likely)
#		in this case, the client would like to know about it (todo)

# --whole-file used because encrypted files are being transferred, and they should never change once downloaded
# -L is used to copy the symlink: /home/inuser/gpgMaildir/.sent -> /home/sentuser/gpgMaildir/new
# --size-only skip files that match in size, no point checking the mtimes, they are all the same
# --ignore-existing skip updating files that exist on receiver, prevent a modification to a encrypted file from being re downloaded
#	(this negates the need for --size-only I think)
# --stats give some file-transfer stats
# -i --itemize-changes output a change-summary for all updates
# -r recurse into directories to get new and .sent
# -t preserve modification times for local gpgMaildir
# --min-size=1 we could use this, but then problems on the mailserver end (which can cause 0 byte files) would go unnoticed, so it's not used. detection is done in gpgmda_to_maildir

rsync --ignore-existing --size-only -t --whole-file -L -c --stats -i -r -vv "${username}"@"${domain}":gpgMaildir "${gpgMaildir_archive_folder}/_gpgMaildirs" | tee /dev/shm/.gpgmda_rsync_last_new_mail_"${email_address}" || exit 1

exit 0

