#!/usr/bin/env python
# -*- coding: utf8 -*- 

from __future__ import print_function
from __future__ import unicode_literals


# todo: locking to prevent multiple instances of mail_update

import sys
import os
import traceback
import optparse
import time
import subprocess
from os.path import exists



def run_notmuch(email_address, mode, query=""):
	print("run_notmuch():",mode)
	notmuch_config_folder=email_archive_folder+"/_notmuch_config"
	notmuch_config_file=notmuch_config_folder+"/.notmuch_config"
	make_notmuch_config(email_address)


	if mode == "update_notmuch_db":
		command="NOTMUCH_CONFIG="+notmuch_config_file+" notmuch new"
		return_code = os.system(command)
		if return_code != 0:
			print("\"notmuch new\" returned nonzero, exiting")
			os._exit(1)


	elif mode == "query_notmuch":
		command="NOTMUCH_CONFIG="+notmuch_config_file+" notmuch " + query
		return_code = os.system(command)
		if return_code != 0:
			print("\"notmuch "+query+ "\" returned nonzero, exiting")
			os._exit(1)


	elif mode == "query_address_db":
		command="XDG_CONFIG_HOME="+notmuch_config_folder+" NOTMUCH_CONFIG="+notmuch_config_file+" "+gpgmda_program_folder+"/nottoomuch-addresses.sh "+query
		return_code = os.system(command)
		if return_code != 0:
			print("\"nottoomuch-addresses.sh\" returned nonzero, exiting")
			os._exit(1)


	elif mode == "build_address_db":
		command="XDG_CONFIG_HOME="+notmuch_config_folder+" NOTMUCH_CONFIG="+notmuch_config_file+" "+gpgmda_program_folder+"/nottoomuch-addresses.sh --update --rebuild"
		return_code = os.system(command)
		if return_code != 0:
			print("\"nottoomuch-addresses.sh\" returned nonzero, exiting")
			os._exit(1)


	elif mode == "update_address_db":
		command="XDG_CONFIG_HOME="+notmuch_config_folder+" NOTMUCH_CONFIG="+notmuch_config_file+" "+gpgmda_program_folder+"/nottoomuch-addresses.sh --update"
		return_code = os.system(command)
		if return_code != 0:
			print("\"nottoomuch-addresses.sh\" returned nonzero, exiting")
			os._exit(1)

	else:
		print("invalid mode",mode,"exiting.")
		os._exit(1)





def make_notmuch_config(email_address):
	username=email_address.split("@")[0]

	notmuch_config="""
[database]
path="""+email_archive_folder+"""/_Maildirs

[user]
name="""+username+"""
primary_email="""+email_address+"""

[new]
tags=unread;inbox;

[maildir]
synchronize_flags=false
"""

	notmuch_config_file_location=email_archive_folder+"/_notmuch_config/.notmuch_config"
	print("writing notmuch config to:", notmuch_config_file_location)
	notmuch_config_file_handle=open(notmuch_config_file_location, "w")
	notmuch_config_file_handle.write(notmuch_config)
	notmuch_config_file_handle.close()



def start_alot(email_address):
	alot_config=subprocess.Popen([gpgmda_program_folder+"/make_alot_config", email_address], stdout=subprocess.PIPE).communicate()
	alot_theme=subprocess.Popen([gpgmda_program_folder+"/make_alot_theme"], stdout=subprocess.PIPE).communicate()

	alot_config_f = open('/dev/shm/__alot_config_'+email_address,'wb')
	alot_theme_f = open('/dev/shm/__alot_theme_'+email_address,'wb')

	alot_config_f.write(alot_config[0])
	alot_theme_f.write(alot_theme[0])

	alot_config_f.close()
	alot_theme_f.close()

	notmuch_config_folder = email_archive_folder+'/_notmuch_config'

	print("starting alot",)
	
	alot_ver=os.system(' '.join(['alot', '--version']))
	
	alot_p=os.system(' '.join(['alot', '-C', '256', '--debug-level=debug', '--logfile=/dev/shm/__alot_log', '--notmuch-config', notmuch_config_folder+'/.notmuch_config', '--mailindex-path', email_archive_folder+'/_Maildirs', '-c', '/dev/shm/__alot_config_'+email_address]))
	


def load_ssh_key(email_address):
	if 'gmail' in email_address:
		return

	ssh_key='/home/user/.ssh/id_rsa__'+email_address

	loaded_ssh_keys_p=subprocess.Popen(['ssh-add','-l'], stdout=subprocess.PIPE)
	loaded_ssh_keys_p_output = loaded_ssh_keys_p.communicate()[0]
	loaded_ssh_key_list = loaded_ssh_keys_p_output.split(b'\n')

	print("ssh-add -l output:")
	for line in loaded_ssh_key_list:
		print(line)

	found_key = 0
	for key in loaded_ssh_key_list:
		if str(ssh_key) in str(key):
			found_key=1
		
	if found_key != 1:
		ssh_add_p = subprocess.Popen(['ssh-add', ssh_key])
		ssh_add_p_output = ssh_add_p.communicate()
		if ssh_add_p.returncode != 0:
			print("something went wrong adding the ssh_key, exiting")
			os._exit(1)



def rsync_mail(email_address):
	load_ssh_key(email_address)

	rsync_p = subprocess.Popen(['rsync', '--ignore-existing', '--size-only', '-t', '--whole-file', '-L', '-c', '--stats', '-i', '-r', '-vv', email_address+':gpgMaildir', email_archive_folder+'/_gpgMaildirs/'+email_address+'_archive/_gpgMaildirs/'], stdout=subprocess.PIPE)
	rsync_p_output=rsync_p.communicate()
	for line in rsync_p_output[0].split(b'\n'):
		print(line)


	print("rsync_p.returncode:",rsync_p.returncode)
	if rsync_p.returncode != 0:
		print("rsync did not return 0, exiting")
		os._exit(1)


	rsync_logfile_handle = open("/dev/shm/.gpgmda_rsync_last_new_mail_"+email_address,'wb')
	rsync_logfile_handle.write(rsync_p_output[0])
	rsync_logfile_handle.close()


def decrypt_mail(email_address):
	print("mail_update decrypt_mail()")
	gpgmda_to_maildir_p = subprocess.Popen([gpgmda_program_folder+"/gpgmda_to_maildir", email_address], stdout=subprocess.PIPE)
	print("created gpgmda_to_maildir_p, about to read output via .communicate()")
	gpgmda_to_maildir_p_output = gpgmda_to_maildir_p.communicate()[0]
	print("gpgmda_to_maildir output")
	gpgmda_to_maildir_p_output_decoded = gpgmda_to_maildir_p_output.decode('utf-8')

	for line in gpgmda_to_maildir_p_output_decoded.split('\n'):
		print(line)

	print("gpgmda_to_maildir_p.returncode:", gpgmda_to_maildir_p.returncode)

	if gpgmda_to_maildir_p.returncode != 0:
		print("gpgmda_to_maildir did not return 0, exiting")
		os._exit(1)

	print("(exiting 0) mail_update decrypt_mail()")




def update_notmuch_db(email_address):
	run_notmuch(email_address, "update_notmuch_db")


def update_notmuch_address_db(email_address):
	run_notmuch(email_address, "update_address_db")


def update_notmuch_address_db_build(email_address):
	run_notmuch(email_address, "build_address_db")


def query_notmuch(email_address, query):
	run_notmuch(email_address, "query_notmuch", query)




def main():

	global options, args
	print(options)

	email_address=args[0]

	global gpgmda_program_folder
	gpgmda_program_folder = os.path.dirname(os.path.realpath(__file__))

	global email_archive_folder
	email_archive_folder = "/home/user/__email_folders"

	gpgMaildir_archive_folder=email_archive_folder+"/_gpgMaildirs/"+email_address+"_archive"

	gpgmaildir=gpgMaildir_archive_folder+"/_gpgMaildirs/gpgMaildir"

	Maildir_archive_folder=email_archive_folder+"/_Maildirs/"+email_address+"_archive"

	maildir=Maildir_archive_folder+"/_Maildirs/Maildir"

	email_archive_type = "gpgMaildir"	#fixme: support getmail

	if options.update:

		noupdate_list=open(gpgmda_program_folder+"/.noupdate",'r').readlines()
		for item in noupdate_list:
			if args[0] in item:
				print(args[0]+" is listed in .noupdate, exiting")
				os._exit(1)
		

		if email_archive_type == "gpgMaildir":
			if not os.path.isdir(gpgMaildir_archive_folder+'/_gpgMaildirs'):
				print(gpgMaildir_archive_folder+'/_gpgMaildirs', "does not exist, exiting")
				os._exit(1)

			rsync_mail(email_address)
			decrypt_mail(email_address)


		elif  email_archive_type == "getmail":
			print('gpgmda_program_folder/getmail_gmail "${email_address}" || exit 1')
			print("todo, call /getmail_gmail ${email_address}")

		else:
		        print("unknown folder type", email_archive_type, ", exiting")

	
		update_notmuch_db(email_address)
		update_notmuch_address_db(email_address)


	if options.read:
		load_ssh_key(email_address)	#so mail can be sent without having to unlock the key
		make_notmuch_config(email_address)
		start_alot(email_address)


	if options.multi:
		query_notmuch(email_address, options.multi)
		

	if options.address_db_build:
		update_notmuch_address_db_build(email_address)		


if __name__ == '__main__':
	try:
        	start_time = time.time()
        	parser = optparse.OptionParser(formatter=optparse.TitledHelpFormatter(), usage=globals()['__doc__'], version='0.1')
        	parser.add_option('-v', '--verbose', action='store_true', default=False, help='verbose output')
        	parser.add_option('-r', '--read', action='store_true', default=False, help='read mail without checking for new mail')
        	parser.add_option('-u', '--update', action='store_true', default=False, help='update (rsync and decrypt) new mail')
        	parser.add_option('-a', '--address_query', action='store_true', default=False, help='search for address string')
        	parser.add_option('-b', '--address_db_build', action='store_true', default=False, help='build address database for use with --address_query')
        	parser.add_option('-q', '--notmuch_query', dest='multi', action='store', help='notmuch arguments')
        	(options, args) = parser.parse_args()
        	if len(args) < 1:
        		parser.error('missing argument')
        	if options.verbose: print(time.asctime())

        	exit_code = main()

        	if exit_code is None:
            		exit_code = 0
        	if options.verbose: print(time.asctime())
        	if options.verbose: print('TOTAL TIME IN MINUTES:',)
        	if options.verbose: print((time.time() - start_time) / 60.0)
        	sys.exit(exit_code)
	except KeyboardInterrupt as e:
        	raise e
	except SystemExit as e:
        	raise e
	except Exception as e:
		print('ERROR, UNEXPECTED EXCEPTION')
		print(str(e))
		traceback.print_exc()
		os._exit(1)




