#!/bin/bash


# note this is outdated and broken, dont use without fixing. should be rewritten as a function in mail_update. It worked when I used it to download my gmail account, but I haven't needed it since and the other scripts have changed considerably.


# script to use a modified version of the getmail package to backup a gmail account available from:
# https://github.com/jakeogh/getmail
# or install getmail 4.24.0 and comment out lines 432 and 433 in /usr/bin/getmail:
# #elif not os.path.isfile(path):             #this check would prevent gpgmda from accepting a config file that is a fifo
# #	raise getmailOperationError('%s is not a file' % path)
# the other changes in the github repo are not necessary to make this script work



exit 1


#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
#-#-#-# <OPTIONS> #-#-#-#-#-#-#


debug=1                                 #uncomment this line to enable debugging output
                                        #NOTES:
                                        #       Along with other information, this logs the sha1 of the incoming message plaintext to the logfile.
                                        #       Comment this out for use in production.


#tarcmd="/usr/local/src/tar-1.26/output/bin/tar"        #tar must support the --transform switch, uncomment this line if you had to compile tar manually


#-#-#-# <END OPTIONS> #-#-#-#-#
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#


debug="${debug-0}"

if [[ "${debug}" != "1" ]] ; then
        exec > >(cat /dev/null) 2>&1            #keep script quiet unless debug=1
fi

if [[ "${debug}" != "1" ]] && [[ "${debug}" != "0" ]] ; then
        fail "debug must be set to 0 or 1, currently debug=${debug}"    #note this will never actually print anything, because debug != 1, but we want to fail here anyway
fi

show_help()
{ cat <<EOF

	TODO

EOF
}


version() { cat <<EOF
0.5 ALPHA [Aug 20 2013]
EOF
}


debug_dump_vars="${debug_dump_vars-0}"

usually_dev_null="${usually_dev_null-/dev/null}"

error_exit_code="${error_exit_code-75}"


my_pid=$$

dbg()
{
        if [[ "${debug}" == "1" ]] ; then
                return 0                #return true if debug=1
        else
                return 1                #debugging is disabled, stop here
        fi
}

log()                                   # print log message if debug=1
{
        if dbg ; then
                test -t 1 && logger -s "[stderr][$PPID][${my_pid}] $*" || logger "[$PPID][${my_pid}] $*"
        fi
        return $?
}

fail()                                  # log error and exit
{
        log "fail() ERROR: $*"
        log "fail() EXITING ${error_exit_code}"
        exit "${error_exit_code}"
}

on_ERR()
{
        prev_line=`caller`
        log "on_ERR called from line: ${prev_line}"
        fail "trapped ERR - on_ERR() called in $0 with $*. Exiting"
}

trap on_ERR ERR                         # from the man docs on set -o errexit







SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ] ; do SOURCE="$(readlink "$SOURCE")"; done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"        # http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in

set -o nounset; set -o errtrace; set -o errexit; set -o pipefail

source "${DIR}"/bash_import_lock_unique_cmd_line        # implements locking so that two identical command lines can not run at the same time.

email_archive_folder="/home/user/__email_folders"

max_messages_per_session=400000

scriptname=`basename "$0"`
argcount=1
usage="user@gmail.com"
test "$#" -ne "${argcount}" && { echo "$0 ${usage}" && exit 1 ; } #"-ge=>=" "-gt=>" "-le=<=" "-lt=<" "-ne=!="

email_address="${1-none}"
username=$(echo "${email_address}" | cut -d '@' -f 1)

echo "$username"

getmail_archive_folder="${email_archive_folder}/_getmail_${email_address}"
maildir="${getmail_archive_folder}/"
maildir_logs="${getmail_archive_folder}/_getmail_logs"
notmuch_folder="${getmail_archive_folder}/_notmuch"

test -d "${getmail_archive_folder}" || { echo "${getmail_archive_folder} not found or is not a directory, exiting" && exit 1 ;}

test -d "${maildir}" || { echo "${maildir} not found or is not a directory, exiting" && exit 1 ;}

touch "${maildir}"/.getmail_dir_write_test && rm "${maildir}"/.getmail_dir_write_test || { echo "${maildir} not writable, exiting" && exit 1 ;}


echo -n "pw: "
read pw

test -z "${pw}" && exit 1


#Gmail Folder Notes:
#  All Mail includes:
#	Sent
#	Drafts
#
#  All Mail does not include:
#	Trash
#	Spam



# default gmail folder list
folder_list()
{
cat <<EOF
All Mail
Starred
Spam
Trash
Important
Sent Mail
Drafts
EOF
}


if [[ -s "${DIR}"/.getmail_custom_labels_"${email_address}" ]]
then
	echo "sourcing ${DIR}/.getmail_custom_labels_${email_address}"
	source "${DIR}"/.getmail_custom_labels_"${email_address}"
else

label_list()
{
cat <<EOF
Inbox
Personal
Travel
Receipts
Work
EOF
}

fi

make_getmail_config()
{

	label_or_folder="${1}"
	tag_name="${2}"
	tag_name_safe=$(echo "${tag_name}" | tr '/' '-')

	if [[ "${label_or_folder}" == "folder" ]];
	then
		mailbox_string="(\"[Gmail]/${tag_name}\",)"
	else
		mailbox_string="(\"${tag_name}\",)"
	fi

cat <<EOF

[retriever]
type = SimpleIMAPSSLRetriever
server = imap.gmail.com
username = ${username}
password = ${pw}
mailboxes = ${mailbox_string}

[destination]
type = Maildir
path = ${maildir}/${tag_name_safe}/


[options]
verbose = 2
message_log = ${maildir_logs}/.${email_address}_${tag_name_safe}.getmail.log
message_log_verbose = True
received = False
delivered_to = False
read_all = False
delete = False
max_messages_per_session = ${max_messages_per_session}

#[destination]
#type = MultiDestination
#destinations = ("[standard_maildir]","[gpgmda]")
#[standard_maildir]
#type = Maildir
#path = ~/.getmail/email_address/${tag_name}/
#[gpgmda]
#type = MDA_external
#path = gpgmda
#arguments = ('~/.getmail/gpg_"${email_address}"/${tag_name_safe}/new/',)

EOF
}



makefolders() {

	label_or_folder="${1}"
	shift

        if [[ "${label_or_folder}" == "folder" ]];
        then
		echo "working with folders"
	elif [[ "${label_or_folder}" == "label" ]];
	then
		echo "working with labels"
	else
		echo "ERROR ${label_or_folder} is not \"label\" or \"folder\""
		exit 1
	fi


	echo "$@" | while read LINE ; do

		line_name_safe=$(echo "${LINE}" | tr '/' '-')

		test -d "${maildir}"/"${line_name_safe}" || newdir "${line_name_safe}"

	        if [[ "${label_or_folder}" == "folder" ]];
        	then
			printf 'Making folder: %s\n' "$LINE"
			config_file=$(make_getmail_config folder "${LINE}")
		fi

	        if [[ "${label_or_folder}" == "label" ]];
        	then
			printf 'Making label: %s\n' "$LINE"
			config_file=$(make_getmail_config label "${LINE}")
		fi


		getmail --getmaildir "${maildir}" -r <(echo "${config_file}")
		getmail_exit_status="$?"
		echo "getmail_exit_status=${getmail_exit_status}"
		if [[ "${getmail_exit_status}" != "0" ]]
		then
			echo "getmail exited ${getmail_exit_status} (nonzero), exiting"
			exit 1
		fi
	done
}



newdir()
{
	echo "making dir ${maildir}/${1}"
	mkdir -m 0700 "${maildir}"/"${1}" || exit 1
	mkdir -m 0700 "${maildir}"/"${1}"/new || exit 1
	mkdir -m 0700 "${maildir}"/"${1}"/cur || exit 1
	mkdir -m 0700 "${maildir}"/"${1}"/tmp || exit 1
}


gmail_folders=$(folder_list)
echo "$gmail_folders"


gmail_labels=$(label_list)
echo "$gmail_labels"


makefolders folder "$gmail_folders"
makefolders label "$gmail_labels"

exit 0
