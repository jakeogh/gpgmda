#!/usr/bin/env python3
import os
import sys
import glob
import time

debug = 1
gpgmda_program_folder = os.path.dirname(os.path.realpath(__file__))
debug_dump_vars="0"
usually_dev_null="/dev/null"
error_exit_code="75"
my_pid = os.getpid()

usage = "decrypt_msg email@domain.com gpg_encrypted_file maildir_output_folder"

gpgmda_config_folder = os.path.expanduser('~/.gpgmda')

global badmail_folder
badmail_folder = gpgmda_config_folder + '/badmail'
zero_length_file_log = gpgmda_config_folder + '/zero_length_files'


def cprint(*args, **kwargs):
    caller = sys._getframe(1).f_code.co_name
    print(str("%.5f" % time.time()), os.getpid(), '{0: <39}'.format(caller+'()'), *args, file=sys.stderr, **kwargs)



def mkdir(folder):
    try:
        os.makedirs(folder)
        return True
    except:
        return False

def is_zero_length_file(fpath):
    if os.path.isfile(fpath) and os.path.getsize(fpath) == 0:
        return True
    return False

def folder_exists(path):
    if os.path.isdir(path): #unlike os.path.exists(False), os.path.isdir(False) returns False so no need to call path_exists() first.
        return True
    return False

def decrypt_msg(email_address, gpgfile, maildir_folder, stdout=False):
    cprint("decrypt_msg()", email_address, gpgfile, maildir_folder)
    if '@' not in email_address:
        cprint("Invalid email address:", email_address,", exiting.")
        os._exit(1)

    if is_zero_length_file(gpgfile):
        cprint("FOUND ZERO LENGTH FILE, EXITING. CHECK THE MAILSERVER LOGS:", gpgfile)
        with open(zero_length_file_log, 'a') as fh:
            fh.write(gpgfile + '\n')
            os._exit(1)

    gpgfile_name = os.path.basename(gpgfile)
    cprint("\ngpgfile_name:", gpgfile_name)

    gpgfile_folder_path = os.path.dirname(gpgfile)
    cprint("gpgfile_folder_path:", gpgfile_folder_path)

    gpgfile_subfolder = os.path.basename(gpgfile_folder_path)
    cprint("gpgfile_subfolder:", gpgfile_subfolder)

    if not folder_exists(maildir_folder):
        cprint("maildir_folder:", maildir_folder, "does not exist. Exiting.")
        os._exit(1)

#   mkdir(badmail_folder) #todo old symlink to badmail 
#   ln -s "${gpgfile}" ~/.gpgmda/badmail/"${gpgfile_name}" || echo "unable to symlink ${gpgfile} to badmail"
#   gpg2 -o - --decrypt "${gpgfile}" | tar --transform="s/$/.${gpgfile_name}/" -C  "${maildir_folder}/${gpgfile_subfolder}" -xvf -
#   rm ~/.gpgmda/badmail/"${gpgfile_name}" || echo "unable to remove symlink ${gpgfile} from badmail"
    
    file_previously_decrypted = 0
    
    glob_pattern = maildir_folder + '/' + gpgfile_subfolder + '/*.' + gpgfile_name
    cprint("glob_pattern:", glob_pattern)

    result = glob.glob(glob_pattern)
    if len(result) > 1:
        cprint("ERROR: More than one result was returned for glob_pattern:", glob_pattern, ": ", result)
        os._exit(1)

    if stdout == False:
        if len(result) == 1:
            result = result[0]
            cprint("skipping existing file:", result)
            quit(0)

    cprint("decrypting:", gpgfile)

    if stdout == True:
#       command = "gpg2 -o - --decrypt " + gpgfile + " | tar --transform=s/$/." + gpgfile_name + "/ -xvf -"
        command = "gpg2 -o - --decrypt " + gpgfile
    else:
        command = "gpg2 -o - --decrypt " + gpgfile + " | tar --transform=s/$/." + gpgfile_name + "/ -C " + maildir_folder + '/' + gpgfile_subfolder + " -xvf -"

    cprint("decrypt_msg() command:", command)
    return_code = os.system(command)
    cprint("return_code:", return_code)

    return True


if __name__ == '__main__':

    arg_count = len(sys.argv[:])

    if arg_count < 4:
        cprint(len(sys.argv[:]))
        cprint(usage)
        os._exit(1)

    email_address = sys.argv[1]
    gpgfile = sys.argv[2]
    maildir_folder = sys.argv[3]

    stdout = False

    if len(sys.argv[:]) == 5:
        if sys.argv[-1] == "--stdout":
            stdout = True

    decrypt_msg(email_address, gpgfile, maildir_folder, stdout)



