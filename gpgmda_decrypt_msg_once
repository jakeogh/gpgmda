#!/bin/bash

# gpgmda_decrypt_msg_once is called by gpgmda_to_maildir

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ] ; do SOURCE="$(readlink "$SOURCE")"; done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"        # http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in

source "${DIR}"/bash_import_set_defaults                # set -o nounset; set -o errtrace; set -o errexit; set -o pipefail
source "${DIR}"/bash_import_email_archive_folder        # defines email_archive_folder

my_pid=$$

argcount=2
usage="email@domain.com gpg_encrypted_file"

test "$#" -eq "${argcount}" || { echo "$0 ${usage}" && exit 1 ; } #"-ge=>=" "-gt=>" "-le=<=" "-lt=<" "-ne=!="

email_address="${1}"

gpgMaildir_archive_folder="${email_archive_folder}/_gpgMaildir_${email_address}_archive"

gpgmaildir="${gpgMaildir_archive_folder}/_gpgMaildirs/gpgMaildir"

maildir="${gpgMaildir_archive_folder}/_Maildirs/Maildir"

gpgfile="${2}"
#echo "gpgfile=${gpgfile}"

gpgfile_name=$(basename "$gpgfile")
#echo "gpgfile_name=${gpgfile_name}"

gpgfile_folder=$(dirname "${gpgfile}")
#echo "gpgfile_folder=${gpgfile_folder}"

gpgfile_subfolder=$(basename "${gpgfile_folder}")
#echo "gpgfile_subfolder=${gpgfile_subfolder}"

#keyid="${3}"

if test ! -s "${gpgfile}"
then
	echo "FOUND ZERO LENGTH FILE, CHECK THE MAILSERVER LOGS - ${gpgfile}"
	timestamp=$(date +%s.%N)
	mv "${gpgfile}" /tmp/"${gpgfile_name}"."${timestamp}"
	exit 0
fi

file_previously_decrypted=0

#there are better ways to do this...like using find for starters

test -s "${maildir}/new/"*".${gpgfile_name}" && file_previously_decrypted=1

test -s "${maildir}/cur/"*".${gpgfile_name}" && file_previously_decrypted=1

test -s "${maildir}/.sent/"*".${gpgfile_name}" && file_previously_decrypted=1


if [ "${file_previously_decrypted}" == "1" ]; then

	:
	#echo "skipping existing file"
else
	ls -al "${gpgfile}"
	echo  "maildir=${maildir} gpgfile_subfolder=${gpgfile_subfolder}"
	gpg2 -o - --decrypt "${gpgfile}" | tar --transform="s/$/.${gpgfile_name}/" -C  "${maildir}/${gpgfile_subfolder}" -xvf -

fi

exit 0
