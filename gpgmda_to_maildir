#!/bin/bash
#date >> ~/blah
#set -x
# convert a gpgMaildir folder containing encrypted messages to a normal Maildir folder.

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
#-#-#-# <OPTIONS> #-#-#-#-#-#-#

debug=1                                 #uncomment this line to enable debugging output
                                        #NOTES:
                                        #       Along with other information, this logs the sha1 of the incoming message plaintext to the logfile.
                                        #       Comment this out for use in production.

#-#-#-# <END OPTIONS> #-#-#-#-#
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#

debug="${debug-0}"

if [[ "${debug}" != "1" ]] ; then
        exec > >(cat /dev/null) 2>&1            #keep script quiet unless debug=1
fi

if [[ "${debug}" != "1" ]] && [[ "${debug}" != "0" ]] ; then
        fail "debug must be set to 0 or 1, currently debug=${debug}"    #note this will never actually print anything, because debug != 1, but we want to fail here anyway
fi

show_help()
{ cat <<EOF
	TODO
EOF
}


version() { cat <<EOF
0.5 ALPHA [Aug 20 2013]
EOF
}

debug_dump_vars="${debug_dump_vars-0}"

usually_dev_null="${usually_dev_null-/dev/null}"

error_exit_code="${error_exit_code-75}"

my_pid=$$

dbg()
{
        if [[ "${debug}" == "1" ]] ; then
                return 0                #return true if debug=1
        else
                return 1                #debugging is disabled, stop here
        fi
}

log()                                   # print log message if debug=1
{
        if dbg ; then
                test -t 1 && logger -s "[stderr][$PPID][${my_pid}] $*" || logger "[$PPID][${my_pid}] $*"
        fi
        return $?
}

fail()                                  # log error and exit
{
        log "fail() ERROR: $*"
        log "fail() EXITING ${error_exit_code}"
        exit "${error_exit_code}"
}

on_ERR()
{
        prev_line=`caller`
        log "on_ERR called from line: ${prev_line}"
        fail "trapped ERR - on_ERR() called in $0 with $*. Exiting"
}

trap on_ERR ERR                         # from the man docs on set -o errexit


SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ] ; do SOURCE="$(readlink "$SOURCE")"; done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"        # http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in

#source "${DIR}"/bash_import_set_defaults                # set -o nounset; set -o errtrace; set -o errexit; set -o pipefail
source ~/cfg/bash_libs/shell_command_lock/shell_command_lock

email_archive_folder="/home/user/__email_folders"

my_pid=$$

scriptname=`basename "$0"`
argcount=1
usage="email@domain.com"

test "$#" -eq "${argcount}" || { log "$0 ${usage}" && exit 1 ; } #"-ge=>=" "-gt=>" "-le=<=" "-lt=<" "-ne=!="

scriptname=`basename "$0"`

email_address="${1}"

gpgMaildir_archive_folder="${email_archive_folder}/_gpgMaildirs/${email_address}"

log "gpgmda_to_maildir using gpgMaildir_archive_folder: ${gpgMaildir_archive_folder}"

gpgmaildir="${gpgMaildir_archive_folder}/gpgMaildir"

Maildir_archive_folder="${email_archive_folder}/_Maildirs/${email_address}"

maildir="${Maildir_archive_folder}/Maildir"


fail()
{
        log "fail() ERROR: $*"
        log "fail() EXITING"
        exit 1
}


log "Checking for default-recipient in ~/.gnupg/gpg.conf"
grep "^default-recipient" ~/.gnupg/gpg.conf > /dev/null 2>&1 || { fail "default-recipient is not defined in ~/.gnupg/gpg.conf," ; exit 1 ; }

log "Checking to see if ${gpgmaildir} exists"
test -d "${gpgmaildir}" || { log "gpgMaildir ${gpgmaildir} not found, exiting" && exit 1 ; }

log "Checking to see if ${maildir} exists"
test -d "${maildir}" || { log "${maildir} does not exist! Creating it along with the standard maildir folders." && mkdir -p "${maildir}/new" && mkdir -p "${maildir}/tmp" && mkdir -p "${maildir}/cur" && mkdir -p "${maildir}/.sent" || exit 1; }


random_string()
{
        gpg2 --gen-random --armor 1 30 | tr '/' '_'
}

warm_up_gpg()
{
	#due to https://bugs.g10code.com/gnupg/issue1190 we must first get gpg-agent warmed up.
	#therefore we decrypt a dummy message.

	decrypt_test=0

	while [[ "${decrypt_test}" != "1" ]]; do
		log "generating gpg test string"
		test_string=$(random_string) || fail "something went wrong generating a random test string"
		echo "${test_string}" | gpg --yes --trust-model always --throw-keyids --encrypt -o - | gpg --decrypt | grep "${test_string}" && decrypt_test=1
	done
	log "done warming up gpg"
}

test_and_decrypt_all_files_in_folder()
{
	log "gpgmda_to_maildir test_and_decrypt_all_files_in_folder()"
	input_folder="${1}"
	# this goes through every file... much slower than the default method.
	# parallel is GNU parallel http://www.gnu.org/software/parallel/

	test -d "${input_folder}" || { log "Folder: ${input_folder} does not exist. Create it. Exiting" && exit 1 ; }

	warm_up_gpg

	log -e "\nworking on ${input_folder}"
	log "email_address: ${email_address}"
	number_of_files_to_process=`find "${input_folder}" -type f | wc -l`
	log "about to process ${number_of_files_to_process} files from ${input_folder}"
	if [[ "${number_of_files_to_process}" -gt "0" ]]
	then
		log "attempting to run gnu parallel on ${input_folder}"
		find "${input_folder}" -type f | parallel --gnu --halt-on-error 1 --keep-order --eta -j+0 "${DIR}/gpgmda_decrypt_msg ${email_address}" '{}' "${maildir}"
	else
		log "skipping decryption of ${input_folder} because 0 files were found"
	fi
}



check_maildirs_by_file_count()
{
	files_in_gpgmaildir=$(find "${gpgmaildir}" -type f | wc -l)
	files_in_maildir=$(find "${maildir}" -type f | wc -l)

	if [[ "${files_in_gpgmaildir}" == "${files_in_maildir}" ]]
	then
		log "file counts (${files_in_gpgmaildir}) match, skipping update"
		return 0
	else
		log "file counts differ:"
		log "files_in_gpgmaildir ${gpgmaildir} =${files_in_gpgmaildir}"
		log "files_in_maildir ${maildir} =${files_in_maildir}"
		return 1
	fi
}


rsync_files_transferred=$(cat /dev/shm/.gpgmda_rsync_last_new_mail_"${email_address}" | grep 'Number of files transferred:' | cut -d ':' -f 2 | tr -d '[:space:]')


log "rsync_files_transferred: ${rsync_files_transferred}"

if [[ "${rsync_files_transferred}" == "0" ]]
then
	log "rsync transferred 0 files"
else
	warm_up_gpg || fail "problem warming up gpg"
	cat /dev/shm/.gpgmda_rsync_last_new_mail_"${email_address}" | grep -v exists | grep gpgMaildir | grep '^>f' | cut -d ' ' -f 2 | cut -d '/' -f 2- | parallel --halt-on-error 1 --keep-order --eta -j+0 "${DIR}"/gpgmda_decrypt_msg "${email_address}" "${gpgmaildir}"/'{}' "${maildir}"
fi

#see if there are files that were not decrypted
if check_maildirs_by_file_count
then
	log "check_maildirs_by_file_count() exited 0"
else
	log "check_maildirs_by_file_count() exited 1, attempting to decrypt all files"
	warm_up_gpg || fail "problem warming up gpg"
	test_and_decrypt_all_files_in_folder "${gpgmaildir}"
fi


exit 0
