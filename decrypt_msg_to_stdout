#!/bin/bash

# gpgmda_decrypt_msg is called by gpgmda_to_maildir
# todo add locking

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ] ; do SOURCE="$(readlink "$SOURCE")"; done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"        # http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in


#source "${DIR}"/bash_import_set_defaults                # set -o nounset; set -o errtrace; set -o errexit; set -o pipefail


#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
#-#-#-# <OPTIONS> #-#-#-#-#-#-#


debug=1                                 #uncomment this line to enable debugging output
                                        #NOTES:
                                        #       Along with other information, this logs the sha1 of the incoming message plaintext to the logfile.
                                        #       Comment this out for use in production.


#tarcmd="/usr/local/src/tar-1.26/output/bin/tar"        #tar must support the --transform switch, uncomment this line if you had to compile tar manually


#-#-#-# <END OPTIONS> #-#-#-#-#
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#


debug="${debug-0}"

#if [[ "${debug}" != "1" ]] ; then
#        exec > >(cat /dev/null) 2>&1            #keep script quiet unless debug=1
#fi

if [[ "${debug}" != "1" ]] && [[ "${debug}" != "0" ]] ; then
        fail "debug must be set to 0 or 1, currently debug=${debug}"    #note this will never actually print anything, because debug != 1, but we want to fail here anyway
fi


debug_dump_vars="${debug_dump_vars-0}"

usually_dev_null="${usually_dev_null-/dev/null}"

error_exit_code="${error_exit_code-75}"

my_pid=$$

argcount=1

usage="gpg_encrypted_file"

test "$#" -eq "${argcount}" || { echo "ERROR:" && echo "$0 ${usage}" && echo "gpgmda_decrypt_msg was passed ${#} args:" && echo "$@" && exit 1 ; } #"-ge=>=" "-gt=>" "-le=<=" "-lt=<" "-ne=!="


gpgfile="${1}"
shift
echo "gpgfile=${gpgfile}"

if test ! -s "${gpgfile}"
then
	echo "FOUND ZERO LENGTH FILE, EXITING. CHECK THE MAILSERVER LOGS - ${gpgfile}"
	exit 1
fi

gpgfile_name=$(basename "$gpgfile")
echo "gpgfile_name=${gpgfile_name}"
gpgfile_folder_path=$(dirname "${gpgfile}")
echo "gpgfile_folder_path=${gpgfile_folder_path}"
gpgfile_subfolder=$(basename "${gpgfile_folder_path}")
echo "gpgfile_subfolder=${gpgfile_subfolder}"


ls -al "${gpgfile}" || { echo "Unable to run ls on ${gpgfile}, exiting without decryption." && exit 1 ; }

gpg2 -o - --decrypt "${gpgfile}" | tar --transform="s/$/.${gpgfile_name}/" -xvf -

exit 0
